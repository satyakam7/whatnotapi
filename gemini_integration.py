import requests
import json
from typing import List, Dict, Any
import asyncio
import aiohttp
import time

class GeminiClient:
    def __init__(self, api_key: str):
        self.api_key = api_key
        self.base_url = "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro:generateContent"
    
    def generate_chats_for_article(self, article_content: str, sys_prompt: str) -> List[str]:
        """
        Generate conversational chats for a news article using Gemini API
        """
        try:
            # Prepare the prompt
            final_prompt = f"{sys_prompt}\n\nThe article is:\n\"\"\"{article_content}\"\"\"\n\nRespond conversationally in Hindi-English mix (Hinglish) with short, engaging sentences."
            
            # Prepare the request payload
            payload = {
                "contents": [
                    {
                        "parts": [
                            {
                                "text": final_prompt
                            }
                        ]
                    }
                ],
                "generationConfig": {
                    "temperature": 0.9,
                    "topP": 1,
                    "maxOutputTokens": 500,
                    "stopSequences": []
                }
            }
            
            # Make the API request
            headers = {
                "Content-Type": "application/json"
            }
            
            url = f"{self.base_url}?key={self.api_key}"
            response = requests.post(url, headers=headers, json=payload, timeout=30)
            
            if response.status_code != 200:
                print(f"Gemini API error: {response.status_code} - {response.text}")
                return ["Error generating chats for this article."]
            
            # Parse the response
            response_data = response.json()
            
            if "candidates" in response_data and len(response_data["candidates"]) > 0:
                content = response_data["candidates"][0]["content"]["parts"][0]["text"]
                
                # Split content into chat chunks (sentence-wise)
                chats = self._split_into_sentences(content)
                return chats[:6]  # Limit to 6 chat chunks
            else:
                print(f"No content generated by Gemini: {response_data}")
                return ["No chats generated for this article."]
                
        except requests.exceptions.Timeout:
            print("Gemini API request timed out")
            return ["API timeout - chats not generated."]
        except requests.exceptions.RequestException as e:
            print(f"Request error: {e}")
            return ["Network error - chats not generated."]
        except Exception as e:
            print(f"Error generating chats: {e}")
            return ["Error generating chats for this article."]
    
    def _split_into_sentences(self, text: str) -> List[str]:
        """
        Split text into sentence-like chunks for chat format
        """
        # Clean up the text
        text = text.strip()
        
        # Split by common sentence endings and conjunctions
        import re
        
        # Split on sentence endings, but keep the punctuation
        sentences = re.split(r'(?<=[.!?])\s+|(?<=,)\s+(?=[A-Z])|(?<=ред)\s+', text)
        
        # Clean and filter sentences
        cleaned_sentences = []
        for sentence in sentences:
            sentence = sentence.strip()
            if sentence and len(sentence) > 10:  # Filter out very short fragments
                # Ensure sentence ends with proper punctuation
                if not sentence.endswith(('.', '!', '?', 'ред')):
                    sentence += '.'
                cleaned_sentences.append(sentence)
        
        # If we get too few sentences, try alternative splitting
        if len(cleaned_sentences) < 3:
            # Split by periods and commas more aggressively
            alt_sentences = re.split(r'[.!?ред]+\s*', text)
            cleaned_sentences = [s.strip() + '.' for s in alt_sentences if s.strip() and len(s.strip()) > 10]
        
        return cleaned_sentences[:6] if cleaned_sentences else [text]

def generate_chats_batch(articles: List[Dict], sys_prompt: str, api_key: str) -> List[Dict]:
    """
    Generate chats for multiple articles with rate limiting
    """
    gemini_client = GeminiClient(api_key)
    
    for i, article in enumerate(articles):
        try:
            # Create content for Gemini (title + description + content)
            article_text = ""
            if article.get("title"):
                article_text += f"Title: {article['title']}\n"
            if article.get("description"):
                article_text += f"Description: {article['description']}\n"
            if article.get("content"):
                article_text += f"Content: {article['content']}"
            
            # If no substantial content, skip
            if len(article_text.strip()) < 50:
                article["chats"] = ["Insufficient content for chat generation."]
                continue
            
            print(f"Generating chats for article {i+1}/{len(articles)}: {article.get('title', 'Unknown')[:50]}...")
            
            # Generate chats
            chats = gemini_client.generate_chats_for_article(article_text, sys_prompt)
            article["chats"] = chats
            
            # Rate limiting - wait between requests to avoid hitting API limits
            if i < len(articles) - 1:  # Don't wait after the last article
                time.sleep(1)  # Wait 1 second between requests
                
        except Exception as e:
            print(f"Error processing article {i+1}: {e}")
            article["chats"] = ["Error generating chats for this article."]
    
    return articles